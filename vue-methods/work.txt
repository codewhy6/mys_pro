//--登录
    userLogin(name,pass){
      let self = this;
      var myreg = /^(((13[0-9]{1})|(14[0-9]{1})|(17[0-9]{1})|(16[0-9]{1})|(15[0-3]{1})|(15[4-9]{1})|(18[0-9]{1})|(19[0-9]{1}))+\d{8})$/;
      if(!myreg.test(this.name)){
        this.$message.error('手机号错误，请重新输入');
        this.name = ''
      }else{
      let data = {
        user_login: name?name:self.name,
        user_pass: pass?pass:self.pass
      }
      self.$http.userLogin(data).then(req => {
        if (req.code == 200) {
          self.$message({
            message: '登录成功！',
            type: 'success'
          });
          //存储登录信息
          localStorage.setItem('token',req.data.token)
          localStorage.setItem('sig', req.data.sig);
//          localStorage.setItem('name',self.name)
//          localStorage.setItem('pass', self.pass);
          localStorage.setItem('status', true);
          localStorage.setItem('timekey', sessionStorage.getItem('timekey'));
          sessionStorage.setItem('token', req.data.token);
          sessionStorage.setItem('sig', req.data.sig);
          sessionStorage.setItem('loginStatus', true)
          // this.$store.state.loginStatus = true;
         self.$store.state.loginStatus = true;
          self.$store.commit('loginStatus',true)
          self.setChangeStatus(true);

        //获取用户信息并且登录 即时通讯IM
          let token = req.data.token;
          let sig = req.data.sig;
          self.$http.getBaseInfo({ token: token }).then(res => {
            if (res.code == 200) {
              let path =self.$route.path
              if(path.indexOf('live_room')>=0){
                  let roomAg = JSON.parse(sessionStorage.getItem('roomInfo'))
                timJs.quitGroup(roomAg.livegroupid);
              }
              timJs.login(res.data.id.toString(),sig)
              tim.on(TIM.EVENT.SDK_READY, function(event) { timJs.updateMyProfile()});
            sessionStorage.setItem('userInfo',JSON.stringify(res.data))
            sessionStorage.removeItem('IMStatus');
            if(path.indexOf('live_room')>=0){
                  self.inRoomLogin();
                  sessionStorage.setItem('inRoomLogin',true)
              window.location.reload()
              }
            }
          })
          self.close();
        self.setLoginStatus(true);
          sessionStorage.setItem('loginStatus',true)
          if(sessionStorage.getItem('change')=='true'){
            self.getBaseInfo();
            sessionStorage.setItem('change','false')
          }

        } else {
         self.$message.error(req.msg);
        }
      }).catch(rep => {
         self.$message.error(rep.msg);
      })}
    },

//--=================================================================
//--退出登录
  logout() {
      let self = this;

      self.$http.logout().then(req => {
        if (req.code == 200) {
          self.$message({
            message: "已退出登录！",
            type: "success"
          });
          this.$router.push({ path: "/" });
          self.setLoginStatus(false);
          sessionStorage.setItem("loginStatus", false);
          sessionStorage.setItem("token", "");
          sessionStorage.setItem("sig", "");
          sessionStorage.setItem("pull", "");

          localStorage.setItem("token", "");
          localStorage.setItem("sig", "");
          localStorage.setItem("name", "");
          localStorage.setItem("pass", "");


        self.getBaseInfo();
          self.ownCenter = false;
          self.loginStatus = false;
        self.status = false;
          //              tim.on(TIM.EVENT.SDK_READY, function(event) {

          timJs.loginOut();
          //              })
        }
      });
    },

//===========================vue-一直滚动========================================
<template>
  <vue-seamless-scroll class="seamless-warp" :data="list" :class-option="options">
    <ul class="item">
      <li
        v-for="(item,index) in list"
        :key="index"
      >用户 {{item.user_nicename}} 获得 {{item.type == 1 && "星钻" || item.type == 2 && "礼物" || item.type == 3 && "特殊礼物" || ''}} <img :src="item.thumb" alt /> {{item.prize}} x {{item.nums}}</li>
    </ul>
  </vue-seamless-scroll>
</template>
<script>
export default {
  props: {
    list: {
      type: Array,
      default: () => [],
    },
  },
  data() {
    return {};
  },
  computed: {
    options() {
      return {
        direction: 1,
        limitMoveNum: this.list.length,
        step: 0.8,
        hoverStop:false,
        openTouch:false
      };
    },
  },
};
</script>
<style lang="less" scoped>
.seamless-warp {
  height: 58px;
  overflow: hidden;
  li {
    height: 58px;
    line-height: 58px;
    color: #ffffff;
    img{
      max-width: 44px;
      max-height: 44px;
      vertical-align: middle;
    }
  }
}
</style>

//===========================  SVGAPlay========================================
<template>
  <div>
    <div class="mask" v-show="visible">
      <div id="svgaPlayer" v-show="visible"></div>
    </div>
  </div>
</template>

<script>
import SVGA from "svgaplayerweb";
export default {
  props: {
    url: String,
  },
  data() {
    return {
      player: null,
      parser: null,
      visible: false,
    };
  },
  methods: {
    start() {
      let player = new SVGA.Player("#svgaPlayer");
      let parser = new SVGA.Parser("#svgaPlayer"); // 如果你需要支持 IE6+，那么必须把同样的选择器传给 Parser。
      parser.load(this.url, (videoItem) => {
        // console.log(videoItem, "videoItem");
        player.loops = 1;
        player.setVideoItem(videoItem);
        player.startAnimation();
        player.onFinished(() => {
          this.$emit("finish");
          this.hide();
        });
      });
    },
    show() {
      this.visible = true;
      this.start();
    },
    hide() {
      this.visible = false;
    },
  },
};
</script>
<style lang="less" scoped>
.mask {
  position: fixed;
  width: 100%;
  height: 100vh;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  z-index: 1000;
  background: rgba(0, 0, 0, 0.3);
}
#svgaPlayer {
  position: fixed;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  z-index: 1000;
}
</style>

